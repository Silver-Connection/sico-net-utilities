<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="account_update" xml:space="preserve">
    <value>Update account information</value>
  </data>
  <data name="account_update_error" xml:space="preserve">
    <value>Could not update account information</value>
  </data>
  <data name="account_update_success" xml:space="preserve">
    <value>Account information updated successfully</value>
  </data>
  <data name="activation_key_send" xml:space="preserve">
    <value>New confirmation key send.</value>
  </data>
  <data name="canceled_by_user" xml:space="preserve">
    <value>Transaction was canceled by user.</value>
  </data>
  <data name="email_activated_already" xml:space="preserve">
    <value>Your e-mail address is already activated</value>
  </data>
  <data name="email_activated_success" xml:space="preserve">
    <value>E-Mail Address successfully activated</value>
  </data>
  <data name="email_activation_send" xml:space="preserve">
    <value>E-Mail address successfully updated. Confirmation key send to new e-mail address.</value>
  </data>
  <data name="email_new_confirmation_key" xml:space="preserve">
    <value>New E-Mail Address Confirmation Key</value>
  </data>
  <data name="email_new_validate_desc" xml:space="preserve">
    <value>To enable your new e-mail address please enter the validation code</value>
  </data>
  <data name="email_send" xml:space="preserve">
    <value>E-Mail successfully send</value>
  </data>
  <data name="email_update_revert" xml:space="preserve">
    <value>E-Mail Address update reverted successfully</value>
  </data>
  <data name="email_used_by_other" xml:space="preserve">
    <value>Given E-Mail Address is already used by an other account.</value>
  </data>
  <data name="email_validate" xml:space="preserve">
    <value>Validate E-Mail Address</value>
  </data>
  <data name="email_validate_desc" xml:space="preserve">
    <value>Your E-Mail address is not validated yet. Please validate it now</value>
  </data>
  <data name="generate_captcha" xml:space="preserve">
    <value>Generate new captcha image</value>
  </data>
  <data name="has_general_business_terms_accepted" xml:space="preserve">
    <value>Has General Business Terms Accepted</value>
  </data>
  <data name="item_activate_done" xml:space="preserve">
    <value>Item activated successfully</value>
  </data>
  <data name="item_activate_error" xml:space="preserve">
    <value>Could not activate item</value>
  </data>
  <data name="item_add_success" xml:space="preserve">
    <value>Item added successfully</value>
  </data>
  <data name="item_delete_ask" xml:space="preserve">
    <value>Do you really want to delete this?</value>
  </data>
  <data name="item_delete_done" xml:space="preserve">
    <value>Item successfully deleted</value>
  </data>
  <data name="item_delete_fail" xml:space="preserve">
    <value>Could not delete item</value>
  </data>
  <data name="item_disable_success" xml:space="preserve">
    <value>Item successfully disabled</value>
  </data>
  <data name="item_enabled_success" xml:space="preserve">
    <value>Item successfully enabled</value>
  </data>
  <data name="item_load_success" xml:space="preserve">
    <value>Item loaded successfully</value>
  </data>
  <data name="item_not_found" xml:space="preserve">
    <value>Item could not be found.</value>
  </data>
  <data name="item_restore_success" xml:space="preserve">
    <value>Item successfully restored</value>
  </data>
  <data name="item_update_success" xml:space="preserve">
    <value>Item successfully updated</value>
  </data>
  <data name="mark_active_ask" xml:space="preserve">
    <value>Do you really want to mark this as active?</value>
  </data>
  <data name="mark_active_done" xml:space="preserve">
    <value>Item successfully marked as active</value>
  </data>
  <data name="mark_active_error" xml:space="preserve">
    <value>Could not mark this as active</value>
  </data>
  <data name="mark_delete_ask" xml:space="preserve">
    <value>Do you really want to mark this as deleted?</value>
  </data>
  <data name="mark_delete_done" xml:space="preserve">
    <value>Item successfully marked as deleted</value>
  </data>
  <data name="mark_delete_error" xml:space="preserve">
    <value>Could not mark this as deleted</value>
  </data>
  <data name="ping_ask" xml:space="preserve">
    <value>Do you want to ping this IP address?</value>
  </data>
  <data name="ping_done" xml:space="preserve">
    <value>IP address successfully pinged</value>
  </data>
  <data name="ping_error_timeout" xml:space="preserve">
    <value>Ping timed out may be ICMP packages are drop by a firewall</value>
  </data>
  <data name="processing_your_login" xml:space="preserve">
    <value>Processing your login...</value>
  </data>
  <data name="request_send_error" xml:space="preserve">
    <value>Could not send request</value>
  </data>
  <data name="sign_in_failed" xml:space="preserve">
    <value>Log on failed. Please try again.</value>
  </data>
  <data name="terms_acceppt_question" xml:space="preserve">
    <value>I have read the &lt;a href="{0}" target="_blank"&gt;Service Terms&lt;/a&gt; and I do accept them.</value>
  </data>
  <data name="ticket_notes_help" xml:space="preserve">
    <value>Leave notes which could be useful in case of failure</value>
  </data>
  <data name="ticket_send_done" xml:space="preserve">
    <value>Ticket successfully send.</value>
  </data>
  <data name="ticket_send_fail" xml:space="preserve">
    <value>Could not send ticket please try again</value>
  </data>
</root>